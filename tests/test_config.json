[
  {
    "type": "workflow",
    "target": "hello",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "hello.infile": "greetings.txt",
      "hello.pattern": "hello.*"
    },
    "output": {
      "hello.matches": [
        "hello world",
        "hello nurse"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "hello_parallel",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "hello_parallel.pattern": "^[a-z_]+$",
      "hello_parallel.infile": [
        "/greetings.txt",
        "greetings2.txt"
      ]
    },
    "output": {
      "hello.matches": [
        [
          "hi_world"
        ],
        [
          "hi_pal"
        ]
      ]
    }
  },
  {
    "type": "workflow",
    "target": "workflow_with_comments",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "workflow_with_comments.number": 1
    },
    "output": {
      "workflow_with_comments.result": 2
    }
  },
  {
    "type": "workflow",
    "target": "primitive_literals",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "primitive_literals.b": true,
      "primitive_literals.i": 0,
      "primitive_literals.f": 27.3,
      "primitive_literals.s": "hello, world",
      "primitive_literals.x": "hello.txt"
    }
  },
  {
    "type": "workflow",
    "target": "optionals",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "optionals.test_defined": false,
      "optionals.test_defined2": true,
      "optionals.test_is_none": true,
      "optionals.test_not_none": false
    }
  },
  {
    "type": "workflow",
    "target": "array_access",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "array_access.strings": [
        "hello",
        "world"
      ],
      "array_access.index": 0
    },
    "output": {
      "array_access.s": "hello"
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "empty_array",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "task",
    "target": "sum",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "sum.ints": [
        0,
        1,
        2
      ]
    },
    "output": {
      "sum.total": 3
    }
  },
  {
    "type": "workflow",
    "target": "non_empty_optional",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "non_empty_optional.nonempty1": [
        0.0
      ],
      "non_empty_optional.nonempty2": [
        null,
        1
      ],
      "non_empty_optional.nonempty3": [],
      "non_empty_optional.nonempty4": [
        0.0
      ]
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "non_empty_optional",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_pairs",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_pairs.five": 5,
      "test_pairs.hello": "hello"
    }
  },
  {
    "type": "workflow",
    "target": "test_map",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_map.ten": 10,
      "test_map.b": 2,
      "test_map.ints": [
        0,
        1,
        2
      ]
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "test_map",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_map_ordering",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_map_ordering.ints": [
        [
          2,
          5
        ],
        [
          1,
          10
        ]
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_object",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_object.obj": {
        "a": 10,
        "b": "hello"
      },
      "test_object.i": 10
    }
  },
  {
    "type": "workflow",
    "target": "test_struct",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_struct.person": {
        "name": "John",
        "account": {
          "account_number": "123456",
          "routing_number": 300211325,
          "balance": 3.5,
          "pin_digits": [
            1,
            2,
            3,
            4
          ]
        }
      },
      "test_struct.has_account": true
    }
  },
  {
    "type": "workflow",
    "target": "incomplete_struct",
    "priority": "required",
    "fail": true,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "primitive_to_string",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "primitive_to_string.i": 3
    },
    "output": {
      "primitive_to_string.istring": "3"
    }
  },
  {
    "type": "workflow",
    "target": "string_to_file",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "string_to_file.string_equals_path": true,
      "string_to_file.paths_equal": true
    }
  },
  {
    "type": "workflow",
    "target": "map_to_struct",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "map_to_struct.literal_syntax": {
        "a": 10,
        "b": 11,
        "c": 12
      },
      "map_to_struct.map_coercion": {
        "beware": 10,
        "key": 11,
        "lookup": 12
      }
    }
  },
  {
    "type": "workflow",
    "target": "declarations",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "declarations.m": {
        "a": "b"
      }
    },
    "output": {
      "declarations.pi": 3.14
    }
  },
  {
    "type": "workflow",
    "target": "task_outputs",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "task_outputs.num_greetings": 2
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "circular",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "task",
    "target": "expressions",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "expressions.x": 5
    },
    "output": {
      "expressions.f": 3.2,
      "expressions.b": false,
      "expressions.m": {
        "a": 1,
        "b": 2,
        "c": 3
      },
      "expressions.i": 8,
      "expressions.s": "hello"
    }
  },
  {
    "type": "workflow",
    "target": "array_map_equality",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "array_map_equality.is_true1": true,
      "array_map_equality.is_true2": true,
      "array_map_equality.is_false1": true,
      "array_map_equality.is_false2": true
    }
  },
  {
    "type": "workflow",
    "target": "compare_coerced",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "compare_coerced.is_true": true
    }
  },
  {
    "type": "workflow",
    "target": "compare_optionals",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "compare_optionals.is_true1": true,
      "compare_optionals.is_true2": true,
      "compare_optionals.is_false1": false,
      "compare_optionals.is_false2": false
    }
  },
  {
    "type": "workflow",
    "target": "member_access",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "member_access.bar": "bar",
      "member_access.hello": "hello"
    }
  },
  {
    "type": "workflow",
    "target": "nested_access",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "nested_access.my_experiments": [
        {
          "id": "mouse_size",
          "variables": [
            "name",
            "height"
          ],
          "data": {
            "name": "Pinky",
            "height": 7
          }
        },
        {
          "id": "pig_weight",
          "variables": [
            "name",
            "weight"
          ],
          "data": {
            "name": "Porky",
            "weight": 1000
          }
        }
      ]
    },
    "output": {
      "nested_access.first_var": "name",
      "nested_access.first_var_from_first_experiment": "name",
      "nested_access.subject_name": "Pinky",
      "nested_access.subject_name_from_first_experiment": "Pinky"
    }
  },
  {
    "type": "workflow",
    "target": "ternary",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "ternary.morning": true
    },
    "output": {
      "ternary.greeting": "good morning"
    }
  },
  {
    "type": "workflow",
    "target": "placeholders",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "placeholders.start": "h",
      "placeholders.end": "o",
      "placeholders.input": "hello"
    },
    "output": {
      "placeholders.command": "grep 'h...o' hello"
    }
  },
  {
    "type": "workflow",
    "target": "nested_placeholders",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "nested_placeholders.i": 3,
      "nested_placeholders.b": true
    },
    "output": {
      "nested_placeholders.s": "4"
    }
  },
  {
    "type": "workflow",
    "target": "placeholder_coercion",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "placeholder_coercion.is_true1": true,
      "placeholder_coercion.is_true2": true,
      "placeholder_coercion.is_true3": true,
      "placeholder_coercion.is_true4": true,
      "placeholder_coercion.is_true5": true,
      "placeholder_coercion.is_true6": true,
      "placeholder_coercion.is_true7": true
    }
  },
  {
    "type": "workflow",
    "target": "concat_optional",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "concat_optional.greeting1": "nice to meet you!",
      "concat_optional.greeting2": "hello Fred, nice to meet you!"
    }
  },
  {
    "type": "task",
    "target": "flags",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "flags.input": "greetings.txt",
      "flags.pattern": "world"
    },
    "output": {
      "flags.num_matches": 2
    }
  },
  {
    "type": "workflow",
    "target": "sep_option_to_function",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "sep_option_to_function.str_array": [
        "A",
        "B",
        "C"
      ],
      "sep_option_to_function.int_array": [
        1,
        2,
        3
      ]
    },
    "output": {
      "sep_option_to_function.is_true1": true,
      "sep_option_to_function.is_true2": true
    }
  },
  {
    "type": "workflow",
    "target": "true_false_ternary",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "true_false_ternary.message": "hello world",
      "true_false_ternary.newline": false
    },
    "output": {
      "true_false_ternary.is_true": true
    }
  },
  {
    "type": "task",
    "target": "default_option",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "default_option.is_true1": true,
      "default_option.is_true2": true
    }
  },
  {
    "target": "greet_person",
    "type": "task",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "person_struct.person": {
        "name": {
          "first": "Richard",
          "last": "Rich"
        },
        "age": 14,
        "income": {
          "amount": 1000000,
          "period": "annually"
        },
        "assay_data": {
          "wealthitis": "hello.txt"
        }
      }
    },
    "output": {
      "person_struct.message": "Hello Richard! You have 1 test result(s) available.\nPlease transfer USD 500 to continue"
    }
  },
  {
    "type": "workflow",
    "target": "import_structs",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "import_structs.bill": 175000
    }
  },
  {
    "type": "task",
    "target": "task_inputs",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "task_inputs.i": 1
    },
    "output": {}
  },
  {
    "type": "task",
    "target": "input_type_quantifiers",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "input_type_quantifiers.a": [],
      "input_type_quantifiers.b": [
        "A",
        "B"
      ],
      "input_type_quantifiers.e": [
        "C"
      ]
    },
    "output": {
      "input_type_quantifiers.lines": [
        "A",
        "B",
        "C"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "optional_with_default",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "optional_with_default.name": "John",
      "optional_with_default.use_salutation": false
    },
    "output": {
      "optional_with_default.greeting": "John"
    }
  },
  {
    "type": "task",
    "target": "private_declaration",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "private_declaration.lines": [
        "A",
        "B",
        "C",
        "D"
      ]
    },
    "output": {
      "private_declaration.out_lines": [
        "A",
        "B",
        "C"
      ]
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "private_declaration",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "task",
    "target": "test_placeholders",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_placeholders.infile": "greetings.txt"
    },
    "output": {
      "test_placeholders.result": "hello world hi_world hello nurse"
    }
  },
  {
    "type": "task",
    "target": "bash_variables",
    "priority": "required",
    "fail": true,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "bash_variables.str": "hello"
    },
    "output": {}
  },
  {
    "type": "task",
    "target": "bash_comment",
    "priority": "required",
    "fail": true,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "task",
    "target": "python_strip",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "python_strip.infile": "comment.txt"
    },
    "output": {
      "python_strip": [
        "A",
        "B",
        "C"
      ]
    }
  },
  {
    "exclude_output": "csvs",
    "type": "task",
    "target": "outputs",
    "priority": "required",
    "fail": false,
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "outputs.t": 5,
      "outputs.write_outstr": false
    },
    "output": {
      "outputs.threshold": 5,
      "outputs.two_csvs": true
    }
  },
  {
    "type": "task",
    "target": "file_output",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "file_output.prefix": "foo"
    },
    "output": {
      "file_output.basenames": [
        "foo.hello",
        "foo.goodbye"
      ]
    }
  },
  {
    "exclude_output": "outfiles",
    "type": "task",
    "target": "glob",
    "priority": "required",
    "fail": false,
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "glob.num_files": 3
    },
    "output": {
      "glob.last_file_contents": 3
    }
  },
  {
    "exclude_output": "bashrc",
    "type": "task",
    "target": "relative_and_absolute",
    "priority": "required",
    "fail": false,
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "relative_and_absolute.something": "something"
    }
  },
  {
    "exclude_output": [
      "example1",
      "file_array"
    ],
    "type": "task",
    "target": "optional_output",
    "priority": "required",
    "fail": false,
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "optional_output.make_example2": false
    },
    "output": {
      "optional_output.example2": null,
      "optional_output.file_array_len": 1
    }
  },
  {
    "type": "task",
    "target": "runtime_container",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "runtime_container.ubuntu_version": "focal"
    },
    "output": {
      "runtime_container.is_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_containers",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_containers.single_greeting": "hello",
      "test_containers.multi_greeting": "hello"
    }
  },
  {
    "dependencies": "cpu",
    "type": "task",
    "target": "test_cpu",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "tags": [],
    "input": {},
    "output": {
      "test_cpu.at_least_two_cpu": true
    }
  },
  {
    "dependencies": "memory",
    "type": "task",
    "target": "test_memory",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "tags": [],
    "input": {},
    "output": {
      "test_memory.at_least_two_gb": true
    }
  },
  {
    "dependencies": "gpu",
    "type": "task",
    "target": "test_gpu",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "tags": [],
    "input": {},
    "output": {
      "test_gpu.at_least_one_gpu": true
    }
  },
  {
    "dependencies": "disks",
    "type": "task",
    "target": "multi_mount_points",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "tags": [],
    "input": {},
    "output": {
      "multi_mount_points.at_least_two_gb": true
    }
  },
  {
    "return_code": 1,
    "type": "task",
    "target": "single_return_code",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "fail": true,
    "return_code": 42,
    "type": "task",
    "target": "multi_return_code",
    "priority": "required",
    "exclude_output": [],
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "return_code": 42,
    "type": "task",
    "target": "all_return_codes",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "task",
    "target": "test_hints",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_hints.foo": "greetings.txt"
    },
    "output": {
      "test_hints.num_lines": 3
    }
  },
  {
    "type": "task",
    "target": "input_hint",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "input_hint.person": {
        "name": "Joe"
      }
    },
    "output": {}
  },
  {
    "type": "task",
    "target": "ex_paramter_meta",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "ex_paramter_meta.infile": "greetings.txt",
      "ex_paramter_meta.lines_only": true
    },
    "output": {
      "ex_paramter_meta.result": "3"
    }
  },
  {
    "dependencies": [
      "cpu",
      "memory",
      "disks"
    ],
    "type": "task",
    "target": "hisat2",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "tags": [],
    "input": {
      "hisat2.index_tar_gz": "https://genome-idx.s3.amazonaws.com/hisat/grch38_genome.tar.gz",
      "hisat2.sra_acc": "SRR3440404",
      "hisat2.max_reads": 10
    },
    "output": {
      "hisat2.sam": "SRR3440404.sam"
    }
  },
  {
    "dependencies": [
      "memory",
      "disks"
    ],
    "type": "task",
    "target": "gatk_haplotype_caller",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "tags": [],
    "input": {
      "gatk_haplotype_caller.bam": "ftp://ftp-trace.ncbi.nlm.nih.gov/ReferenceSamples/giab/data/NA12878/NIST_NA12878_HG001_HiSeq_300x/RMNISTHS_30xdownsample.bam",
      "gatk_haplotype_caller.reference": {
        "id": "Homo_sapiens_assembly38",
        "fasta": "https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta",
        "index": "https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta.fai",
        "dict": "https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.dict"
      },
      "gatk_haplotype_caller.interval": "chr1:1000000-1010000"
    },
    "output": {
      "gatk_haplotype_caller.vcf": "HG002.vcf"
    }
  },
  {
    "type": "workflow",
    "target": "input_ref_call",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "input_ref_call.x": 5
    },
    "output": {
      "input_ref_call.result": 20
    }
  },
  {
    "type": "task",
    "target": "call_imported",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "call_imported_task.x": 5
    },
    "output": {
      "call_imported_task.result": 20
    }
  },
  {
    "type": "workflow",
    "target": "main",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "main.echo_results": "hello",
      "main.foobar_results": 1,
      "main.echo_array": [
        "a",
        "b",
        "c"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "other",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "other.b": true,
      "other.f": "greetings.txt"
    },
    "output": {
      "other.results": 3
    }
  },
  {
    "type": "workflow",
    "target": "call_example",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "call_example.s": "hello",
      "call_example.i": 2
    },
    "output": {
      "call_example.lines1": [
        "default",
        "default",
        "default"
      ],
      "call_example.lines2": [
        "hello",
        "hello",
        "hello",
        "hello"
      ],
      "call_example.lines3": [
        "hello",
        "hello"
      ],
      "call_example.results1": null,
      "call_example.results2": null
    }
  },
  {
    "type": "workflow",
    "target": "test_after",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_after.lines1": [
        "hello",
        "hello"
      ],
      "test_after.lines2": [
        "hello hello"
      ],
      "test_after.lines3": [
        "default",
        "default",
        "default"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "copy_input",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "copy_input.name": "Billy"
    },
    "output": {
      "copy_input.greeting": "Hello Billy",
      "copy_input.msg": "Hello Billy, nice to meet you!"
    }
  },
  {
    "type": "workflow",
    "target": "allow_nested",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "allow_nested.int_val": 3,
      "allow_nested.msg1": "hello",
      "allow_nested.msg2": "goodbye",
      "allow_nested.my_ints": [
        1,
        2,
        3
      ],
      "allow_nested.ref_file": "hello.txt"
    },
    "output": {
      "allow_nested.lines1": [
        "hello",
        "hello",
        "hello"
      ],
      "allow_nested.lines2": [
        "goodbye",
        "goodbye"
      ],
      "allow_nested.repeat2.i": 2,
      "allow_nested.incrs": [
        2,
        3,
        4
      ]
    }
  },
  {
    "type": "workflow",
    "target": "call_subworkflow",
    "priority": "required",
    "fail": true,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_scatter",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_scatter.messages": [
        "Hello Joe, how are you?",
        "Hello Bob, how are you?",
        "Hello Fred, how are you?"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "nested_scatter",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "nested_scatter.out_messages": [
        [
          [
            "Hello Mr. Bilbo, how are you?",
            "Hello Mr. Bilbo Baggins, how are you?"
          ],
          [
            "Goodbye Mr. Bilbo, how are you?",
            "Goodbye Mr. Bilbo Baggins, how are you?"
          ]
        ],
        [
          [
            "Hello Wizard Gandalf, how are you?",
            "Hello Wizard Gandalf the Grey, how are you?"
          ],
          [
            "Goodbye Wizard Gandalf, how are you?",
            "Goodbye Wizard Gandalf the Grey, how are you?"
          ]
        ],
        [
          [
            "Hello Mr. Merry, how are you?",
            "Hello Mr. Merry Brandybuck, how are you?"
          ],
          [
            "Goodbye Mr. Merry, how are you?",
            "Goodbye Mr. Merry Brandybuck, how are you?"
          ]
        ]
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_conditional",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_conditional.result_array": [
        4,
        6,
        8,
        10
      ],
      "test_conditional.maybe_result2": [
        0,
        4,
        6,
        8,
        10
      ]
    }
  },
  {
    "type": "workflow",
    "target": "if_else",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "if_else.greeting": "Good afternoon buddy!"
    }
  },
  {
    "type": "workflow",
    "target": "nested_if",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "nested_if.morning": true,
      "nested_if.friendly": false
    },
    "output": {
      "nested_if.greeting_maybe": null,
      "nested_if.greeting": "hi"
    }
  },
  {
    "type": "workflow",
    "target": "test_floor",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_floor.i1": 2
    },
    "output": {
      "test_floor.all_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_ceil",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_ceil.i1": 2
    },
    "output": {
      "test_ceil.all_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_round",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_round.i1": 2
    },
    "output": {
      "test_round.all_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_min",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_min.value1": 1,
      "test_min.value2": 2.0
    },
    "output": {
      "test_min.min1": 1.0,
      "test_min.min2": 1.0
    }
  },
  {
    "type": "workflow",
    "target": "test_max",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_max.value1": 1,
      "test_max.value2": 2.0
    },
    "output": {
      "test_max.min1": 1.0,
      "test_max.min2": 1.0
    }
  },
  {
    "type": "workflow",
    "target": "test_sub",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_sub.chocolove": "I love chocolate when\nit's late",
      "test_sub.chocoearly": "I like chocoearly when\nit's early",
      "test_sub.chocolate": "I like chocolate when\nit's early",
      "test_sub.chocoearlylate": "I like chocearly when\nit's late",
      "test_sub.choco4": "I 4444 chocolate 4444\nit's late",
      "test_sub.no_newline": "I like chocolate when it's late"
    }
  },
  {
    "type": "task",
    "target": "change_extension",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "change_extension.prefix": "foo"
    },
    "output": {
      "change_extension.data": "data",
      "change_extension.index": "index"
    }
  },
  {
    "type": "workflow",
    "target": "test_basename",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_basename.is_true1": true,
      "test_basename.is_true2": true
    }
  },
  {
    "type": "task",
    "target": "gen_files",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "gen_files.num_files": 2
    },
    "output": {
      "gen_files.glob_len": 2
    }
  },
  {
    "type": "task",
    "target": "file_sizes",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "file_sizes.missing_file_bytes": 0.0,
      "file_sizes.created_file_bytes": 22.0,
      "file_sizes.multi_file_kb": 0.022
    }
  },
  {
    "type": "workflow",
    "target": "echo_stdout",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "echo_stdout.message": "hello world"
    }
  },
  {
    "type": "workflow",
    "target": "echo_stderr",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "echo_stderr.message": "hello world"
    }
  },
  {
    "type": "task",
    "target": "read_string",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_string.s": "this\nfile\nhas\nfive\nlines"
    }
  },
  {
    "type": "task",
    "target": "read_int",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_int.i": 1
    }
  },
  {
    "type": "task",
    "target": "read_float",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_float.f1": 1.0,
      "read_float.f2": 2.0
    }
  },
  {
    "type": "task",
    "target": "read_bool",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_bool.b1": true,
      "read_bool.b2": false
    }
  },
  {
    "type": "task",
    "target": "grep",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "grep.pattern": "world",
      "grep.file": "greetings.txt"
    },
    "output": {
      "grep.matches": [
        "hello world",
        "hi_world"
      ]
    }
  },
  {
    "type": "task",
    "target": "write_lines",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "write_lines.s": "first\tsecond\tthird"
    }
  },
  {
    "type": "task",
    "target": "read_tsv",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_tsv.output_table": [
        [
          "row1",
          "value1"
        ],
        [
          "row2",
          "value2"
        ],
        [
          "row3",
          "value3"
        ]
      ]
    }
  },
  {
    "type": "task",
    "target": "write_tsv",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "write_tsv.ones": [
        "one",
        "un"
      ]
    }
  },
  {
    "type": "task",
    "target": "read_map",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_map.mapping": {
        "key1": "value1",
        "key2": "value2"
      }
    }
  },
  {
    "type": "task",
    "target": "write_map",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "write_map.keys": [
        "key1",
        "key2"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "read_person",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "read_person.json_file": "person.json"
    },
    "output": {
      "read_person.p": {
        "name": "John",
        "age": 42
      }
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "write_json",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "task",
    "target": "write_json",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "write_json.keys": [
        "key1",
        "key2"
      ]
    }
  },
  {
    "type": "task",
    "target": "read_object",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_object.my_obj": {
        "key_0": "value_0",
        "key_1": "value_1",
        "key_2": "value_2"
      }
    }
  },
  {
    "type": "task",
    "target": "read_objects",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "read_objects.my_obj": [
        {
          "key_0": "value_A0",
          "key_1": "value_A1",
          "key_2": "value_A2"
        },
        {
          "key_0": "value_B0",
          "key_1": "value_B1",
          "key_2": "value_B2"
        },
        {
          "key_0": "value_C0",
          "key_1": "value_C1",
          "key_2": "value_C2"
        }
      ]
    }
  },
  {
    "type": "task",
    "target": "write_object",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "write_object.obj": {
        "key_1": "value_1",
        "key_2": "value_2",
        "key_3": "value_3"
      }
    },
    "output": {
      "write_object.results": [
        "key_1",
        "value_1"
      ]
    }
  },
  {
    "type": "task",
    "target": "write_objects",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "write_objects.obj_array": [
        {
          "key_1": "value_1",
          "key_2": "value_2",
          "key_3": "value_3"
        },
        {
          "key_1": "value_4",
          "key_2": "value_5",
          "key_3": "value_6"
        },
        {
          "key_1": "value_7",
          "key_2": "value_8",
          "key_3": "value_9"
        }
      ]
    },
    "output": {
      "write_objects.results": [
        "key_1",
        "value_1",
        "value_4",
        "value_7"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_prefix",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_prefix.env1_prefixed": [
        "-e key1=value1",
        "-e key2=value2",
        "-e key3=value3"
      ],
      "test_prefix.env2_prefixed": [
        "-f 1",
        "-f 2",
        "-f 3"
      ]
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "test_prefix",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_suffix",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_suffix.env1_suffix": [
        "key1=value1.txt",
        "key2=value2.txt",
        "key3=value3.txt"
      ],
      "test_suffix.env2_suffix": [
        "1.0",
        "2.0",
        "3.0"
      ]
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "test_suffix",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_quote",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_quote.env1_quoted": [
        "\"key1=value1\"",
        "\"key2=value2\"",
        "\"key3=value3\""
      ],
      "test_quote.env2_quoted": [
        "\"1\"",
        "\"2\"",
        "\"3\""
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_squote",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_squote.env1_quoted": [
        "'key1=value1'",
        "'key2=value2'",
        "'key3=value3'"
      ],
      "test_squote.env2_quoted": [
        "'1'",
        "'2'",
        "'3'"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_sep",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_sep.all_true": [
        true,
        true,
        true,
        true
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_length",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_length.xlen": 3,
      "test_length.ylen": 3,
      "test_length.zlen": 0
    }
  },
  {
    "type": "workflow",
    "target": "test_range",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "test_range.n": 5
    },
    "output": {
      "test_range.result": [
        0,
        2,
        4,
        6,
        8
      ]
    }
  },
  {
    "type": "workflow",
    "target": "test_transpose",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_transpose.is_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_cross",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_cross.is_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_zip",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_zip.is_true": true
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "test_zip",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_unzip",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_unzip.is_true1": true,
      "test_unzip.is_true2": true,
      "test_unzip.is_true3": true
    }
  },
  {
    "type": "workflow",
    "target": "test_flatten",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_flatten.is_true1": true,
      "test_flatten.is_true2": true,
      "test_flatten.is_true3": true,
      "test_flatten.is_true4": true
    }
  },
  {
    "type": "workflow",
    "target": "test_select_first",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_select_first.five1": 5,
      "test_select_first.five2": 5
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "select_first_only_none",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "select_first_empty",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_select_all",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_select_all.is_true": true
    }
  },
  {
    "type": "workflow",
    "target": "test_as_pairs",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_as_pairs.is_true1": true,
      "test_as_pairs.is_true2": true,
      "test_as_pairs.is_true3": true
    }
  },
  {
    "type": "workflow",
    "target": "test_as_map",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_as_map.is_true1": true,
      "test_as_map.is_true2": true
    }
  },
  {
    "fail": true,
    "type": "workflow",
    "target": "test_as_map",
    "priority": "required",
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {}
  },
  {
    "type": "workflow",
    "target": "test_keys",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_keys.is_true1": true,
      "test_keys.is_true2": true
    }
  },
  {
    "type": "workflow",
    "target": "test_collect_by_key",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "test_collect_by_key.is_true1": true,
      "test_collect_by_key.is_true2": true
    }
  },
  {
    "type": "workflow",
    "target": "is_defined",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "is_defined.name": "John"
    },
    "output": {
      "is_defined.greeting": "Hello John"
    }
  },
  {
    "type": "workflow",
    "target": "pair_to_array",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "pair_to_array.aout": [
        1,
        2
      ]
    }
  },
  {
    "type": "workflow",
    "target": "pair_to_struct",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "pair_to_struct.sout": {
        "left": "hello",
        "right": 42
      }
    }
  },
  {
    "type": "workflow",
    "target": "map_to_struct2",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "map_to_struct2.sout": {
        "keys": [
          0,
          1
        ],
        "values": [
          "a",
          "b"
        ]
      }
    }
  },
  {
    "type": "workflow",
    "target": "map_to_array",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {},
    "output": {
      "map_to_array.aout": [
        [
          0,
          7
        ],
        [
          1,
          42
        ]
      ]
    }
  },
  {
    "type": "task",
    "target": "read_write_primitives",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "read_write_primitives.s": "hello",
      "read_write_primitives.i": 42
    },
    "output": {
      "read_write_primitives.sout": "hello",
      "read_write_primitives.istr": "42",
      "read_write_primitives.iout": 42
    }
  },
  {
    "type": "task",
    "target": "serialize_array_delim",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serialize_array_delim.infile": "greetings.txt",
      "serialize_array_delim.counts": [
        1,
        2
      ]
    },
    "output": {
      "serialize_array_delim.strings": [
        "hello world",
        "hello world",
        "hi_world"
      ]
    }
  },
  {
    "type": "task",
    "target": "serde_array_lines",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serde_array_lines.input": "greetings.txt",
      "serde_array_lines.patterns": [
        "hello",
        "world"
      ]
    },
    "output": {
      "serde_array_lines.matches": [
        2,
        2
      ]
    }
  },
  {
    "type": "task",
    "target": "serde_array_json",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serde_array_json.string_to_int": {
        "a": 1,
        "b": 2
      }
    },
    "output": {
      "serde_array_json.keys": [
        "a",
        "b"
      ]
    }
  },
  {
    "type": "workflow",
    "target": "serde_pair",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serde_pair.to_tail": {
        "cities.txt": 2,
        "hello.txt": 1
      }
    },
    "output": {
      "serde_pair.tails_of_two": {
        "Houston": "Chicago"
      }
    }
  },
  {
    "type": "workflow",
    "target": "serde_homogeneous_pair",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serde_homogeneous_pair.int_strings": {
        "1": "2",
        "3": "4"
      }
    },
    "output": {
      "serde_homogeneous_pair.ints": [
        1,
        2,
        3,
        4
      ]
    }
  },
  {
    "type": "workflow",
    "target": "serialize_map",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serialize_map.infile": "greetings.txt",
      "serialize_map.pattern": "hello",
      "serialize_map.args": {
        "--after-context": "1",
        "--max-count": "1"
      }
    },
    "output": {
      "serialize_map.results1": [
        "hello world",
        "hi_world"
      ],
      "serialize_map.results2": [
        "hello world",
        "hi_world"
      ]
    }
  },
  {
    "type": "task",
    "target": "serde_map_tsv",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serde_map_tsv.items": {
        "a": "b",
        "c": "d",
        "e": "f"
      }
    },
    "output": {
      "serde_map_tsv.new_items": {
        "a": "c",
        "e": "b",
        "d": "f"
      }
    }
  },
  {
    "type": "task",
    "target": "serde_map_json",
    "priority": "required",
    "fail": false,
    "exclude_output": [],
    "return_code": "*",
    "dependencies": [],
    "tags": [],
    "input": {
      "serde_map_json.read_quality_scores": {
        "read1": 32,
        "read2": 41,
        "read3": 55
      }
    },
    "output": {
      "serde_map_json.ascii_values": {
        "read1": 65,
        "read2": 74,
        "read3": 88
      }
    }
  }
]